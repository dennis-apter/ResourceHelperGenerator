using System;
using System.CodeDom.Compiler;
using System.IO;
using System.Linq;
using System.Reflection;
using Microsoft.CSharp;

namespace ResourceHelperGenerator
{
    internal static class TemplateRenderer
    {
        private const string TypeInfoSymbol = "RESOURCE_HELPER_TYPEINFO";

        private static readonly string[] Separators = { Environment.NewLine };

        public static void RenderTemplate(TextWriter innerWriter, TemplateModel model)
        {
            using (var writer = new IndentedTextWriter(innerWriter))
            {
                writer.WriteLine("// <auto-generated />");
                writer.WriteEmptyLine();
                writer.WriteConditional("#if NETFX_CORE");
                writer.WriteConditional("#define " + TypeInfoSymbol);
                writer.WriteConditional("#endif");
                writer.WriteEmptyLine();
                using (writer.WriteBlock("namespace {0}", GetValidIdentifier(model.ProjectName)))
                {
                    writer.WriteClass(model);
                }
            }
        }

        private static void WriteUsings(this TextWriter writer, params string[] usings)
        {
            foreach (var @using in usings)
            {
                writer.WriteLine("using {0};", @using);
            }
        }

        private static void WriteClass(this IndentedTextWriter writer, TemplateModel model)
        {
            writer.WriteUsings("System", "System.CodeDom.Compiler", "System.Diagnostics", "System.Globalization", "System.Reflection", "System.Resources");
            writer.WriteEmptyLine();
            writer.WriteLine(@"[GeneratedCode(""ResourceHelperGenerator"", ""{0}"")]", GetAssemblyVersion(typeof(TemplateRenderer).Assembly));
            writer.WriteAccessModifier();
            using (writer.WriteBlock("static class {0}", GetValidIdentifier(model.FileName)))
            {
                writer.WriteFields(model);
                foreach (var data in model.ResourceData)
                {
                    writer.WriteEmptyLine();
                    writer.WriteResource(data);
                }
                writer.WriteEmptyLine();
                writer.WriteGetStringMethod();
                writer.WriteEmptyLine();
                writer.WriteGetAssemblyMethod();
            }
        }

        private static string GetAssemblyVersion(Assembly assembly)
        {
            return assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
        }

        private static void WriteAccessModifier(this IndentedTextWriter writer)
        {
            writer.WriteConditional("#if RESOURCE_HELPER_INTERNAL");
            writer.WriteLine("internal");
            writer.WriteConditional("#else");
            writer.WriteLine("public");
            writer.WriteConditional("#endif");
        }

        private static void WriteFields(this IndentedTextWriter writer, TemplateModel model)
        {
            writer.WriteLine("private static readonly ResourceManager ResourceManager");
            writer.Indent++;
            writer.WriteLine("= new ResourceManager(\"{0}.Properties.{1}\", GetAssembly(typeof({1})));", model.ProjectName, model.FileName);
            writer.Indent--;
        }

        private static void WriteResource(this IndentedTextWriter writer, ResourceData data)
        {
            writer.WriteHeader(data);

            if (data.Arguments.Any())
            {
                writer.WriteFormatMethod(data);
            }
            else
            {
                writer.WriteProperty(data);
            }
        }

        private static void WriteHeader(this TextWriter writer, ResourceData data)
        {
            if (data.Arguments.Any())
            {
                writer.WriteSummaryTag(data.Value, data.Comment);
            }
            else
            {
                writer.WriteSummaryTag(data.Value);

                if (!string.IsNullOrWhiteSpace(data.Comment))
                {
                    writer.WriteValueTag(data.Comment);
                }
            }
        }

        private static void WriteSummaryTag(this TextWriter writer, params string[] summaryParts)
        {
            writer.WriteLine("/// <summary>");
            foreach (var summaryPart in summaryParts)
            {
                writer.WriteMultiLine(summaryPart, line => string.Format("/// {0}", line.CleanXmlTags()));
            }
            writer.WriteLine("/// </summary>");
        }

        private static void WriteValueTag(this TextWriter writer, string value)
        {
            writer.WriteLine("/// <value>");
            writer.WriteMultiLine(value, line => string.Format("/// {0}", line.CleanXmlTags()));
            writer.WriteLine("/// </value>");
        }

        private static string CleanXmlTags(this string line)
        {
            return line.Replace("<", "&lt;").Replace(">", "&gt;");
        }

        private static void WriteMultiLine(this TextWriter writer, string value, Func<string, string> transformer)
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                return;
            }

            foreach (var line in value.Split(Separators, StringSplitOptions.None))
            {
                writer.WriteLine(transformer.Invoke(line));
            }
        }

        private static void WriteFormatMethod(this IndentedTextWriter writer, ResourceData data)
        {
            var formatArguments = data.UsingNamedArgs ? string.Concat(", ", data.FormatArguments) : null;

            var methodIdentifier = GetValidIdentifier(data.Name);

            using (writer.WriteBlock("public static string {0}({1})", methodIdentifier, data.Parameters))
            {
                writer.WriteLine("return string.Format(CultureInfo.CurrentCulture, GetString(\"{0}\"{1}), {2});", data.Name, formatArguments, data.ArgumentNames);
            }
        }

        private static void WriteProperty(this IndentedTextWriter writer, ResourceData data)
        {
            var propertyModifier = GetValidIdentifier(data.Name);

            using (writer.WriteBlock("public static string {0}", propertyModifier))
            {
                writer.WriteLine("get {{ return GetString(\"{0}\"); }}", data.Name);
            }
        }

        private static void WriteGetStringMethod(this IndentedTextWriter writer)
        {
            using (writer.WriteBlock("private static string GetString(string name, params string[] formatterNames)"))
            {
                writer.WriteLine("var value = ResourceManager.GetString(name);");
                writer.WriteEmptyLine();
                using (writer.WriteBlock("if (value == null)"))
                {
                    writer.WriteLine("throw new Exception(string.Format(\"Value for key '{0}' was null.\", name));");
                }
                writer.WriteEmptyLine();
                using (writer.WriteBlock("if (formatterNames != null)"))
                {
                    using (writer.WriteBlock("for (var i = 0; i < formatterNames.Length; i++)"))
                    {
                        writer.WriteLine("value = value.Replace(\"{\" + formatterNames[i] + \"}\", \"{\" + i + \"}\");");
                    }
                }
                writer.WriteEmptyLine();
                writer.WriteLine("return value;");
            }
        }

        private static void WriteGetAssemblyMethod(this IndentedTextWriter writer)
        {
            using (writer.WriteBlock("private static Assembly GetAssembly(Type type)"))
            {
                writer.WriteConditional("#if " + TypeInfoSymbol);
                writer.WriteLine("return type.GetTypeInfo().Assembly;");
                writer.WriteConditional("#else");
                writer.WriteLine("return type.Assembly;");
                writer.WriteConditional("#endif");
            }
        }

        private static void WriteConditional(this IndentedTextWriter writer, string conditional)
        {
            var tempIndent = writer.Indent;

            writer.Indent = 0;
            writer.WriteLine(conditional);
            writer.Indent = tempIndent;
        }

        private static IndentedTextWriterBlock WriteBlock(this IndentedTextWriter writer, string format, params object[] args)
        {
            return new IndentedTextWriterBlock(writer, string.Format(format, args));
        }

        private static void WriteEmptyLine(this IndentedTextWriter writer)
        {
            var temp = writer.Indent;

            writer.Indent = 0;

            writer.WriteLine();

            writer.Indent = temp;
        }

        private static string GetValidIdentifier(string value)
        {
            var codeProvider = new CSharpCodeProvider();

            var isValidIdentifier = value.Split('.')
                .Select(codeProvider.CreateValidIdentifier)
                .All(codeProvider.IsValidIdentifier);

            if (isValidIdentifier)
            {
                return value;
            }

            throw new InvalidOperationException(string.Format("'{0}' is not a valid identifier.", value));
        }

        private class IndentedTextWriterBlock : IDisposable
        {
            private readonly IndentedTextWriter _writer;

            public IndentedTextWriterBlock(IndentedTextWriter writer, string statement)
            {
                _writer = writer;

                _writer.WriteLine(statement);
                _writer.WriteLine("{");
                _writer.Indent++;
            }

            public void Dispose()
            {
                _writer.Indent--;
                _writer.WriteLine("}");
            }
        }
    }
}